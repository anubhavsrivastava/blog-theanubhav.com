webpackJsonp([0xe02aa95d76cb],{793:function(e,t){e.exports={data:{post:{id:"/Users/anubhavsrivastava/Developer/PProjects/blog@theanubhav.com/content/posts/2018-11-7--understanding-primitive-and-getter-setters.md absPath of file >>> MarkdownRemark",html:'<h2 id="lets-understand-how-can-we-make-a1--a2--a3-to-ever-be-true-with-help-of-getter-setter-descriptors"><a href="#lets-understand-how-can-we-make-a1--a2--a3-to-ever-be-true-with-help-of-getter-setter-descriptors" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Let’s understand how can we make <code class="language-text">(a===1 &amp;&amp; a===2 &amp;&amp; a===3)</code> to ever be true with help of getter-setter descriptors.</h2>\n<p>We shall take a brief dive into the traditional problem and also solve a problem which is extension of it.</p>\n<h3 id="table-of-contents"><a href="#table-of-contents" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Table of contents</h3>\n<!-- toc -->\n<ul>\n<li>\n<p><a href="#revisiting-a1--a2--a3-loose-equality-problem">Revisiting <code class="language-text">(a==1 &amp;&amp; a==2 &amp;&amp; a==3)</code> (loose equality) problem</a></p>\n<ul>\n<li><a href="#problem-a1--a2--a3">Problem <code class="language-text">(a==1 &amp;&amp; a==2 &amp;&amp; a==3)</code></a></li>\n<li><a href="#explanation">Explanation</a></li>\n</ul>\n</li>\n<li>\n<p><a href="#problem-a1--a2--a3-strict-comparison">Problem <code class="language-text">(a===1 &amp;&amp; a===2 &amp;&amp; a===3)</code> (strict comparison)</a></p>\n<ul>\n<li><a href="#explanation-1">Explanation</a></li>\n<li><a href="#what-are-property-descriptors">What are property descriptors?</a></li>\n</ul>\n</li>\n<li>\n<p><a href="#references">References</a></p>\n</li>\n</ul>\n<!-- tocstop -->\n<h3 id="revisiting-a1--a2--a3-loose-equality-problem"><a href="#revisiting-a1--a2--a3-loose-equality-problem" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Revisiting <code class="language-text">(a==1 &amp;&amp; a==2 &amp;&amp; a==3)</code> (loose equality) problem</h3>\n<p>If you are already familiar with this question and understand how can one solve this JavaScript tricky riddle (Yes, riddle, I don’t see a use case in production code, ¯\\_(ツ)_/¯ ), you can move on to <a href="#problem-a1--a2--a3-strict-comparison">next section</a> which is an attempt to solve the extension of it (with strict equality).\nThere is also a <a href="https://www.reddit.com/r/javascript/comments/7r0i00/can_a_1_a_2_a3_ever_evaluate_to_true/">reddit</a> discussion around this problem. Most interesting comment which I noticed is,</p>\n<p><strong>“If this is the type of code I’m likely to encounter in your codebase, then I’m out”.</strong></p>\n<hr>\n<h4 id="problem-a1--a2--a3"><a href="#problem-a1--a2--a3" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Problem <code class="language-text">(a==1 &amp;&amp; a==2 &amp;&amp; a==3)</code></h4>\n<p>Can (a==1 &#x26;&#x26; a==2 &#x26;&#x26; a==3) ever evaluate to true?</p>\n<p>Yes, and to make it true one can do this,</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\na<span class="token punctuation">.</span><span class="token function-variable function">valueOf</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span></code></pre>\n      </div>\n<p>The purpose of a question like this in interview, isn’t to know the answer to the brain-teaser, so much as to get a feel for how the interviewee thinks through problems, and whether they have awareness of the kinds of features and oddities of JS that can make the <code class="language-text">==</code> comparison behave strangely.</p>\n<h4 id="explanation"><a href="#explanation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Explanation</h4>\n<p>The secret here is, loose equality operator (<code class="language-text">==</code>).</p>\n<p>In JS, loose equality compares two values for equality, after converting both values to a common type. After conversions (one or both sides may undergo conversions), the final equality comparison is performed exactly as <code class="language-text">===</code> performs it. Loose equality is symmetric: <code class="language-text">A == B</code> always has identical semantics to <code class="language-text">B == A</code> for any values of A and B (except for the order of applied conversions).\nRefer <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness">here</a> for all in-depth explanation about loose and strict comparison.</p>\n<p>Question here is how does JavaScript coerce this values?</p>\n<p>Based on values of comparison, type coercion occurs, lets consider a internal function to convert so,</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript">    <span class="token function">ToPrimitive</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> PreferredType<span class="token operator">?</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>The optional parameter PreferredType indicates the final type of the conversion: it is either Number or String, depending on whether the result of <code class="language-text">ToPrimitive()</code> will be converted to a number or a string.</p>\n<p>Conversion happens in following order,</p>\n<ol>\n<li>If input is primitive type, return it</li>\n<li>If input is an object. Call <code class="language-text">input.valueOf()</code>. If the result is primitive, return it.</li>\n<li>Else, call <code class="language-text">input.toString()</code>. If the result is primitive, return it.</li>\n<li>throw a <code class="language-text">TypeError</code> (indicating the failure to convert input to a primitive).</li>\n</ol>\n<p>If PreferredType is Number, the above algorithm works in specified order.\nIf PreferredType is String, steps 2 and 3 are swapped.\nThe PreferredType can also be omitted; it is then considered to be String for dates and Number for all other values.\nThe default implementation of <code class="language-text">valueOf()</code> returns <code class="language-text">this</code>, while the default implementation of <code class="language-text">toString()</code> returns type information.</p>\n<p>This is how the operators + and == call <code class="language-text">ToPrimitive()</code>. (Aha! )</p>\n<p>So in above code, as soon as JS saw, <code class="language-text">a==1</code>, ‘1’ being primitive type it tried to convert ‘a’ to Number, and with above algorithm, <code class="language-text">a.valueOf</code> was called returning ‘1’ (incrementing previous value for and returning it).\nSimilar coercion came into effect for <code class="language-text">a==2</code> and <code class="language-text">a==3</code> thus incrementing it for next time.</p>\n<hr>\n<h3 id="problem-a1--a2--a3-strict-comparison"><a href="#problem-a1--a2--a3-strict-comparison" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Problem <code class="language-text">(a===1 &amp;&amp; a===2 &amp;&amp; a===3)</code> (strict comparison)</h3>\n<p>Can (a===1 &#x26;&#x26; a===2 &#x26;&#x26; a===3) ever evaluate to true?</p>\n<p>Yes, below code would make this true,</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//window.value</span>\nObject<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h4 id="explanation-1"><a href="#explanation-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Explanation</h4>\n<p>Our understanding from previous problem is, primitive values would never satisfy above condition, we need by some means call a function and inside that function we can perform this magic. But calling a function would involve <code class="language-text">()</code> after function name. hmm… strange.\nBut since there is no loose equality, .valueOf won’t be called by JS Engine, bringing function <code class="language-text">Property</code>, especially <code class="language-text">getter</code>, to the rescue.</p>\n<h5 id="what-are-property-descriptors"><a href="#what-are-property-descriptors" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>What are property descriptors?</h5>\n<p>A <em>property descriptor</em> can be of two types: data descriptor, or accessor descriptor.</p>\n<ol>\n<li>\n<p>Data descriptor</p>\n<p>Mandatory properties:</p>\n<ul>\n<li><code class="language-text">value</code></li>\n</ul>\n<p>Optional properties:</p>\n<ul>\n<li><code class="language-text">configurable</code></li>\n<li><code class="language-text">enumerable</code></li>\n<li><code class="language-text">writable</code></li>\n</ul>\n<p>Sample:\n{\nvalue: 5,\nwritable: true\n}</p>\n</li>\n<li>\n<p>Accessor descriptor</p>\n<p>Mandatory properties:</p>\n<ul>\n<li>Either <code class="language-text">get</code> or <code class="language-text">set</code> or both</li>\n</ul>\n<p>Optional properties:</p>\n<ul>\n<li><code class="language-text">configurable</code></li>\n<li><code class="language-text">enumerable</code></li>\n</ul>\n<p>Sample:\n{\nget: function () { return 5; },\nenumerable: true\n}</p>\n</li>\n</ol>\n<p>Accessor Example from Mozilla pages,</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// Example of an object property added</span>\n<span class="token comment">// with defineProperty with an accessor property descriptor</span>\n\n<span class="token keyword">var</span> bValue <span class="token operator">=</span> <span class="token number">38</span><span class="token punctuation">;</span>\n\nObject<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Using shorthand method names (ES2015 feature).</span>\n  <span class="token comment">// This is equivalent to:</span>\n  <span class="token comment">// get: function() { return bValue; },</span>\n  <span class="token comment">// set: function(newValue) { bValue = newValue; },</span>\n  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> bValue<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    bValue <span class="token operator">=</span> newValue<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  configurable<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\no<span class="token punctuation">.</span>b<span class="token punctuation">;</span> <span class="token comment">// 38</span>\n<span class="token comment">// \'b\' property exists in the o object and its value is 38</span>\n<span class="token comment">// The value of o.b is now always identical to bValue,</span>\n<span class="token comment">// unless o.b is redefined</span></code></pre>\n      </div>\n<p>A property on a object be defined by using <code class="language-text">Object.defineProperty</code> as mentioned in the solution. You can dig into syntax and definition <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">here</a> .\nInterestingly, <code class="language-text">get</code> and <code class="language-text">set</code> are accessors which can be called via dot(.) operator, i.e if object <code class="language-text">a</code> has getter property called <code class="language-text">b</code> then it is called just like any other value with dot notation, viz, <code class="language-text">a.b</code>.\nThis is the solution to our initial problem, wherein we needed to call a function without <code class="language-text">()</code>, with <code class="language-text">get</code> property, we are able to call a function without using <code class="language-text">()</code> after function name.</p>\n<p>In above mentioned <a href="#problem-a1--a2--a3-strict-comparison">solution</a>, we are defining <code class="language-text">a</code> getter property on window object, so <code class="language-text">a</code> is directly accessible in code (global variables) and hence are able to achieve the result.\nIf we define a property called <code class="language-text">a</code> on some other object than <code class="language-text">window</code>, say <code class="language-text">object1</code>, we need to change the condition to <code class="language-text">object1.a===1 &amp;&amp; object1.a===2 &amp;&amp; object1.a===3</code>.</p>\n<h2 id="github-gist"><a href="#github-gist" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Github Gist</h2>\n<ul>\n<li><a href="https://gist.github.com/anubhavsrivastava/4680a165db9e1abc459c5987e778a674">Problem <code class="language-text">(a==1 &amp;&amp; a==2 &amp;&amp; a==3)</code></a></li>\n<li><a href="https://gist.github.com/anubhavsrivastava/2bd7cd81fb23d138df99c47988855adc">Problem <code class="language-text">(a===1 &amp;&amp; a===2 &amp;&amp; a===3)</code></a></li>\n</ul>\n<h2 id="references"><a href="#references" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>References</h2>\n<ul>\n<li><a href="https://www.reddit.com/r/javascript/comments/7r0i00/can_a_1_a_2_a3_ever_evaluate_to_true/">Reddit Post</a></li>\n<li><a href="http://speakingjs.com/es5/ch17.html">Speaking JS</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">MDN web-docs</a></li>\n</ul>\n<hr>',htmlAst:{type:"root",children:[{type:"element",tagName:"h2",properties:{id:"lets-understand-how-can-we-make-a1--a2--a3-to-ever-be-true-with-help-of-getter-setter-descriptors"},children:[{type:"element",tagName:"a",properties:{href:"#lets-understand-how-can-we-make-a1--a2--a3-to-ever-be-true-with-help-of-getter-setter-descriptors",ariaHidden:!0,className:["anchor"]},children:[{type:"element",tagName:"svg",properties:{ariaHidden:"true",height:16,version:"1.1",viewBox:"0 0 16 16",width:16},children:[{type:"element",tagName:"path",properties:{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},children:[]}]}]},{type:"text",value:"Let’s understand how can we make "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"(a===1 && a===2 && a===3)"}]},{type:"text",value:" to ever be true with help of getter-setter descriptors."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"We shall take a brief dive into the traditional problem and also solve a problem which is extension of it."}]},{type:"text",value:"\n"},{type:"element",tagName:"h3",properties:{id:"table-of-contents"},children:[{type:"element",tagName:"a",properties:{href:"#table-of-contents",ariaHidden:!0,className:["anchor"]},children:[{type:"element",tagName:"svg",properties:{ariaHidden:"true",height:16,version:"1.1",viewBox:"0 0 16 16",width:16},children:[{type:"element",tagName:"path",properties:{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},children:[]}]}]},{type:"text",value:"Table of contents"}]},{type:"text",value:"\n"},{type:"comment",value:" toc "},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"element",tagName:"a",properties:{href:"#revisiting-a1--a2--a3-loose-equality-problem"},children:[{type:"text",value:"Revisiting "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"(a==1 && a==2 && a==3)"}]},{type:"text",value:" (loose equality) problem"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"#problem-a1--a2--a3"},children:[{type:"text",value:"Problem "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"(a==1 && a==2 && a==3)"}]}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"#explanation"},children:[{type:"text",value:"Explanation"}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"element",tagName:"a",properties:{href:"#problem-a1--a2--a3-strict-comparison"},children:[{type:"text",value:"Problem "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"(a===1 && a===2 && a===3)"}]},{type:"text",value:" (strict comparison)"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"#explanation-1"},children:[{type:"text",value:"Explanation"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"#what-are-property-descriptors"},children:[{type:"text",value:"What are property descriptors?"}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"element",tagName:"a",properties:{href:"#references"},children:[{type:"text",value:"References"}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"comment",value:" tocstop "},{type:"text",value:"\n"},{type:"element",tagName:"h3",properties:{id:"revisiting-a1--a2--a3-loose-equality-problem"},children:[{type:"element",tagName:"a",properties:{href:"#revisiting-a1--a2--a3-loose-equality-problem",ariaHidden:!0,className:["anchor"]},children:[{type:"element",tagName:"svg",properties:{ariaHidden:"true",height:16,version:"1.1",viewBox:"0 0 16 16",width:16},children:[{type:"element",tagName:"path",properties:{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},children:[]}]}]},{type:"text",value:"Revisiting "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"(a==1 && a==2 && a==3)"}]},{type:"text",value:" (loose equality) problem"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"If you are already familiar with this question and understand how can one solve this JavaScript tricky riddle (Yes, riddle, I don’t see a use case in production code, ¯\\_(ツ)_/¯ ), you can move on to "},{type:"element",tagName:"a",properties:{href:"#problem-a1--a2--a3-strict-comparison"},children:[{type:"text",value:"next section"}]},{type:"text",value:" which is an attempt to solve the extension of it (with strict equality).\nThere is also a "},{type:"element",tagName:"a",properties:{href:"https://www.reddit.com/r/javascript/comments/7r0i00/can_a_1_a_2_a3_ever_evaluate_to_true/"},children:[{type:"text",value:"reddit"}]},{type:"text",value:" discussion around this problem. Most interesting comment which I noticed is,"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"element",tagName:"strong",properties:{},children:[{type:"text",value:"“If this is the type of code I’m likely to encounter in your codebase, then I’m out”."}]}]},{type:"text",value:"\n"},{type:"element",tagName:"hr",properties:{},children:[]},{type:"text",value:"\n"},{type:"element",tagName:"h4",properties:{id:"problem-a1--a2--a3"},children:[{type:"element",tagName:"a",properties:{href:"#problem-a1--a2--a3",ariaHidden:!0,className:["anchor"]},children:[{type:"element",tagName:"svg",properties:{ariaHidden:"true",height:16,version:"1.1",viewBox:"0 0 16 16",width:16},children:[{type:"element",tagName:"path",properties:{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},children:[]}]}]},{type:"text",value:"Problem "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"(a==1 && a==2 && a==3)"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Can (a==1 && a==2 && a==3) ever evaluate to true?"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Yes, and to make it true one can do this,"}]},{type:"text",value:"\n"},{type:"element",tagName:"div",properties:{className:["gatsby-highlight"],dataLanguage:"javascript"},children:[{type:"text",value:"\n      "},{type:"element",tagName:"pre",properties:{className:["language-javascript"]},children:[{type:"element",tagName:"code",properties:{className:["language-javascript"]},children:[{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"const"}]},{type:"text",value:" a "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"="}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:" value"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:":"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","number"]},children:[{type:"text",value:"0"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\na"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"."}]},{type:"element",tagName:"span",properties:{className:["token","function-variable","function"]},children:[{type:"text",value:"valueOf"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"="}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",
value:"function"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n  "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"return"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"this"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"."}]},{type:"text",value:"value "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"+="}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","number"]},children:[{type:"text",value:"1"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n\nconsole"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"."}]},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"log"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"text",value:"a "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"=="}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","number"]},children:[{type:"text",value:"1"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"&&"}]},{type:"text",value:" a "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"=="}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","number"]},children:[{type:"text",value:"2"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"&&"}]},{type:"text",value:" a "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"=="}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","number"]},children:[{type:"text",value:"3"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"//true"}]}]}]},{type:"text",value:"\n      "}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"The purpose of a question like this in interview, isn’t to know the answer to the brain-teaser, so much as to get a feel for how the interviewee thinks through problems, and whether they have awareness of the kinds of features and oddities of JS that can make the "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"=="}]},{type:"text",value:" comparison behave strangely."}]},{type:"text",value:"\n"},{type:"element",tagName:"h4",properties:{id:"explanation"},children:[{type:"element",tagName:"a",properties:{href:"#explanation",ariaHidden:!0,className:["anchor"]},children:[{type:"element",tagName:"svg",properties:{ariaHidden:"true",height:16,version:"1.1",viewBox:"0 0 16 16",width:16},children:[{type:"element",tagName:"path",properties:{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},children:[]}]}]},{type:"text",value:"Explanation"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"The secret here is, loose equality operator ("},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"=="}]},{type:"text",value:")."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"In JS, loose equality compares two values for equality, after converting both values to a common type. After conversions (one or both sides may undergo conversions), the final equality comparison is performed exactly as "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"==="}]},{type:"text",value:" performs it. Loose equality is symmetric: "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"A == B"}]},{type:"text",value:" always has identical semantics to "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"B == A"}]},{type:"text",value:" for any values of A and B (except for the order of applied conversions).\nRefer "},{type:"element",tagName:"a",properties:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness"},children:[{type:"text",value:"here"}]},{type:"text",value:" for all in-depth explanation about loose and strict comparison."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Question here is how does JavaScript coerce this values?"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Based on values of comparison, type coercion occurs, lets consider a internal function to convert so,"}]},{type:"text",value:"\n"},{type:"element",tagName:"div",properties:{className:["gatsby-highlight"],dataLanguage:"javascript"},children:[{type:"text",value:"\n      "},{type:"element",tagName:"pre",properties:{className:["language-javascript"]},children:[{type:"element",tagName:"code",properties:{className:["language-javascript"]},children:[{type:"text",value:"    "},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"ToPrimitive"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"text",value:"input"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" PreferredType"},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"?"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]}]}]},{type:"text",value:"\n      "}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"The optional parameter PreferredType indicates the final type of the conversion: it is either Number or String, depending on whether the result of "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"ToPrimitive()"}]},{type:"text",value:" will be converted to a number or a string."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Conversion happens in following order,"}]},{type:"text",value:"\n"},{type:"element",tagName:"ol",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"If input is primitive type, return it"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"If input is an object. Call "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"input.valueOf()"}]},{type:"text",value:". If the result is primitive, return it."}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Else, call "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"input.toString()"}]},{type:"text",value:". If the result is primitive, return it."}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"throw a "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"TypeError"}]},{type:"text",value:" (indicating the failure to convert input to a primitive)."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"If PreferredType is Number, the above algorithm works in specified order.\nIf PreferredType is String, steps 2 and 3 are swapped.\nThe PreferredType can also be omitted; it is then considered to be String for dates and Number for all other values.\nThe default implementation of "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"valueOf()"}]},{type:"text",value:" returns "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"this"}]},{type:"text",value:", while the default implementation of "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"toString()"}]},{type:"text",value:" returns type information."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"This is how the operators + and == call "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"ToPrimitive()"}]},{type:"text",value:". (Aha! )"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"So in above code, as soon as JS saw, "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"a==1"}]},{type:"text",value:", ‘1’ being primitive type it tried to convert ‘a’ to Number, and with above algorithm, "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"a.valueOf"}]},{type:"text",value:" was called returning ‘1’ (incrementing previous value for and returning it).\nSimilar coercion came into effect for "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"a==2"}]},{type:"text",value:" and "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"a==3"}]},{type:"text",value:" thus incrementing it for next time."}]},{type:"text",value:"\n"},{type:"element",tagName:"hr",properties:{},children:[]},{type:"text",value:"\n"},{type:"element",tagName:"h3",properties:{id:"problem-a1--a2--a3-strict-comparison"},children:[{type:"element",tagName:"a",properties:{href:"#problem-a1--a2--a3-strict-comparison",ariaHidden:!0,className:["anchor"]},children:[{type:"element",tagName:"svg",properties:{ariaHidden:"true",height:16,version:"1.1",viewBox:"0 0 16 16",width:16},children:[{type:"element",tagName:"path",properties:{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},children:[]}]}]},{type:"text",value:"Problem "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"(a===1 && a===2 && a===3)"}]},{type:"text",value:" (strict comparison)"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Can (a===1 && a===2 && a===3) ever evaluate to true?"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Yes, below code would make this true,"}]},{type:"text",value:"\n"},{type:"element",tagName:"div",properties:{className:["gatsby-highlight"],dataLanguage:"javascript"},children:[{type:"text",value:"\n      "},{type:"element",tagName:"pre",properties:{className:["language-javascript"]},children:[{type:"element",tagName:"code",properties:{className:["language-javascript"]},children:[{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"var"}]},{type:"text",value:" value "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"="}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","number"]},children:[{type:"text",value:"0"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"//window.value"}]},{type:"text",value:"\nObject"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"."}]},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"defineProperty"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"text",value:"window"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:'"a"'}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n  "},{type:"element",tagName:"span",properties:{className:["token","function-variable","function"]},children:[{type:"text",value:"get"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:":"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"function"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n    "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"return"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"this"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"."}]},{type:"text",value:"value "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"+="}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","number"]},children:[{type:"text",value:"1"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n  "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n\nconsole"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"."}]},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"log"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"text",value:"a "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"==="}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","number"]},children:[{type:"text",value:"1"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"&&"}]},{type:"text",value:" a "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"==="}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","number"]},children:[{type:"text",value:"2"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"&&"}]},{type:"text",value:" a "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"==="}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","number"]},children:[{type:"text",value:"3"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"/"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","boolean"]},children:[{type:"text",value:"true"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]}]}]},{type:"text",value:"\n      "}]},{type:"text",value:"\n"},{type:"element",tagName:"h4",properties:{id:"explanation-1"},children:[{type:"element",tagName:"a",properties:{href:"#explanation-1",ariaHidden:!0,className:["anchor"]},children:[{type:"element",tagName:"svg",properties:{ariaHidden:"true",height:16,version:"1.1",viewBox:"0 0 16 16",width:16},children:[{type:"element",tagName:"path",properties:{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},children:[]}]}]},{type:"text",value:"Explanation"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Our understanding from previous problem is, primitive values would never satisfy above condition, we need by some means call a function and inside that function we can perform this magic. But calling a function would involve "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"()"}]},{type:"text",value:" after function name. hmm… strange.\nBut since there is no loose equality, .valueOf won’t be called by JS Engine, bringing function "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"Property"}]},{type:"text",value:", especially "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"getter"}]},{type:"text",value:", to the rescue."}]},{type:"text",value:"\n"},{type:"element",tagName:"h5",properties:{id:"what-are-property-descriptors"},children:[{type:"element",tagName:"a",properties:{href:"#what-are-property-descriptors",ariaHidden:!0,className:["anchor"]},children:[{type:"element",tagName:"svg",properties:{ariaHidden:"true",height:16,version:"1.1",viewBox:"0 0 16 16",width:16},children:[{type:"element",tagName:"path",properties:{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},children:[]}]}]},{type:"text",value:"What are property descriptors?"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"A "},{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"property descriptor"}]},{type:"text",value:" can be of two types: data descriptor, or accessor descriptor."}]},{type:"text",value:"\n"},{type:"element",tagName:"ol",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Data descriptor"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Mandatory properties:"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"value"}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Optional properties:"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"configurable"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"enumerable"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"writable"}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Sample:\n{\nvalue: 5,\nwritable: true\n}"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Accessor descriptor"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Mandatory properties:"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Either "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"get"}]},{type:"text",value:" or "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"set"}]},{type:"text",value:" or both"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Optional properties:"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"configurable"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"enumerable"}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Sample:\n{\nget: function () { return 5; },\nenumerable: true\n}"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Accessor Example from Mozilla pages,"}]},{type:"text",value:"\n"},{type:"element",tagName:"div",properties:{className:["gatsby-highlight"],dataLanguage:"javascript"},children:[{type:"text",value:"\n      "},{type:"element",tagName:"pre",properties:{className:["language-javascript"]},children:[{type:"element",tagName:"code",properties:{className:["language-javascript"]},children:[{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"// Example of an object property added"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"// with defineProperty with an accessor property descriptor"}]},{type:"text",value:"\n\n"},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"var"}]},{type:"text",value:" bValue "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"="}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","number"]},children:[{type:"text",value:"38"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n\nObject"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"."}]},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"defineProperty"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"text",value:"o"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:'"b"'}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n  "},{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"// Using shorthand method names (ES2015 feature)."}]},{type:"text",value:"\n  "},{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"// This is equivalent to:"}]},{type:"text",value:"\n  "},{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"// get: function() { return bValue; },"}]},{type:"text",value:"\n  "},{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"// set: function(newValue) { bValue = newValue; },"}]},{type:"text",value:"\n  "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"get"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n    "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"return"}]},{type:"text",value:" bValue"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n  "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:"\n  "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"set"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"text",value:"newValue"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n    bValue "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"="}]},{type:"text",value:" newValue"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n  "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:"\n  enumerable"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:":"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","boolean"]},children:[{type:"text",value:"true"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:"\n  configurable"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:":"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","boolean"]},children:[{type:"text",value:"true"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\no"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"."}]},{type:"text",value:"b"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"// 38"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"// 'b' property exists in the o object and its value is 38"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",
properties:{className:["token","comment"]},children:[{type:"text",value:"// The value of o.b is now always identical to bValue,"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"// unless o.b is redefined"}]}]}]},{type:"text",value:"\n      "}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"A property on a object be defined by using "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"Object.defineProperty"}]},{type:"text",value:" as mentioned in the solution. You can dig into syntax and definition "},{type:"element",tagName:"a",properties:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"},children:[{type:"text",value:"here"}]},{type:"text",value:" .\nInterestingly, "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"get"}]},{type:"text",value:" and "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"set"}]},{type:"text",value:" are accessors which can be called via dot(.) operator, i.e if object "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"a"}]},{type:"text",value:" has getter property called "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"b"}]},{type:"text",value:" then it is called just like any other value with dot notation, viz, "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"a.b"}]},{type:"text",value:".\nThis is the solution to our initial problem, wherein we needed to call a function without "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"()"}]},{type:"text",value:", with "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"get"}]},{type:"text",value:" property, we are able to call a function without using "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"()"}]},{type:"text",value:" after function name."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"In above mentioned "},{type:"element",tagName:"a",properties:{href:"#problem-a1--a2--a3-strict-comparison"},children:[{type:"text",value:"solution"}]},{type:"text",value:", we are defining "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"a"}]},{type:"text",value:" getter property on window object, so "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"a"}]},{type:"text",value:" is directly accessible in code (global variables) and hence are able to achieve the result.\nIf we define a property called "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"a"}]},{type:"text",value:" on some other object than "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"window"}]},{type:"text",value:", say "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"object1"}]},{type:"text",value:", we need to change the condition to "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"object1.a===1 && object1.a===2 && object1.a===3"}]},{type:"text",value:"."}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{id:"github-gist"},children:[{type:"element",tagName:"a",properties:{href:"#github-gist",ariaHidden:!0,className:["anchor"]},children:[{type:"element",tagName:"svg",properties:{ariaHidden:"true",height:16,version:"1.1",viewBox:"0 0 16 16",width:16},children:[{type:"element",tagName:"path",properties:{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},children:[]}]}]},{type:"text",value:"Github Gist"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://gist.github.com/anubhavsrivastava/4680a165db9e1abc459c5987e778a674"},children:[{type:"text",value:"Problem "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"(a==1 && a==2 && a==3)"}]}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://gist.github.com/anubhavsrivastava/2bd7cd81fb23d138df99c47988855adc"},children:[{type:"text",value:"Problem "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"(a===1 && a===2 && a===3)"}]}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{id:"references"},children:[{type:"element",tagName:"a",properties:{href:"#references",ariaHidden:!0,className:["anchor"]},children:[{type:"element",tagName:"svg",properties:{ariaHidden:"true",height:16,version:"1.1",viewBox:"0 0 16 16",width:16},children:[{type:"element",tagName:"path",properties:{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},children:[]}]}]},{type:"text",value:"References"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://www.reddit.com/r/javascript/comments/7r0i00/can_a_1_a_2_a3_ever_evaluate_to_true/"},children:[{type:"text",value:"Reddit Post"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"http://speakingjs.com/es5/ch17.html"},children:[{type:"text",value:"Speaking JS"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript"},children:[{type:"text",value:"MDN web-docs"}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"hr",properties:{},children:[]}],data:{quirksMode:!1}},fields:{slug:"2018/11/07/understanding-primitive-and-getter-setters/",prefix:"2018-11-7"},frontmatter:{title:"Will (a===1 && a===2 && a===3)(strict comparison) ever be true (in JavaScript)",subTitle:"Extension to traditional JavaScript problem (a==1 && a==2 && a==3) (loose equality) and its solution",cover:{childImageSharp:{resize:{src:"/static/avatar-js-5e57f06d1be55aa3f60500b3f62368c6-160fa.png"}}}}},author:{id:"/Users/anubhavsrivastava/Developer/PProjects/blog@theanubhav.com/content/parts/author.md absPath of file >>> MarkdownRemark",html:""},footnote:{id:"/Users/anubhavsrivastava/Developer/PProjects/blog@theanubhav.com/content/parts/footnote.md absPath of file >>> MarkdownRemark",html:'<hr>\n<ul>\n<li><a href="https://about.theanubhav.com">Anubhav Srivastava</a></li>\n</ul>'}},pathContext:{slug:"2018/11/07/understanding-primitive-and-getter-setters/"}}}});
//# sourceMappingURL=path---2018-11-07-understanding-primitive-and-getter-setters-90180bbd644cf2eec38c.js.map